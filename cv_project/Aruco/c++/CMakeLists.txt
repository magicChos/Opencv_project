cmake_minimum_required(VERSION 3.5.1)
project(main)

set(CMAKE_BUILD_TYPE Debug)

message(STATUS "......")
if (NOT ${CMAKE_VERSION} LESS 3.2)
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
else ()
    message(STATUS "Checking compiler flags for C++11 support.")
    include(CheckCXXCompilerFlag)
    check_cxx_compiler_flag("-std=c++11" COMPILER_SUPPORTS_CXX11)
    check_cxx_compiler_flag("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
    if (COMPILER_SUPPORTS_CXX11)
        message(STATUS "C++11 is supported.")
        if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -stdlib=libc++")
        else ()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
        endif ()
    elseif (COMPILER_SUPPORTS_CXX0X)
        message(STATUS "C++0x is supported.")
        if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -stdlib=libc++")
        else ()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
        endif ()
    else ()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
    endif ()
endif ()

FIND_PACKAGE( OpenCV 3.2.0)
INCLUDE_DIRECTORIES( ${OpenCV_INCLUDE_DIRS} )

include_directories(.)
# include_directories(/usr/local/include)
# include_directories(/usr/local/Cellar/opencv/4.2.0/include/opencv4)
add_executable(generate_marker generate_marker.cpp poseestamation.cpp)
TARGET_LINK_LIBRARIES(generate_marker LINK_PUBLIC ${OpenCV_LIBS} pthread)

